/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as protectedRouteRouteImport } from './routes/(protected)/route'
import { Route as protectedIndexRouteImport } from './routes/(protected)/index'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedRouteRoute = protectedRouteRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedIndexRoute = protectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => protectedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof protectedIndexRoute
  '/login': typeof LoginRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/': typeof protectedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(protected)': typeof protectedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/(protected)/': typeof protectedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/'
  id: '__root__' | '/(protected)' | '/login' | '/(protected)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  protectedRouteRoute: typeof protectedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/': {
      id: '/(protected)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedIndexRouteImport
      parentRoute: typeof protectedRouteRoute
    }
  }
}

interface protectedRouteRouteChildren {
  protectedIndexRoute: typeof protectedIndexRoute
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedIndexRoute: protectedIndexRoute,
}

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(
  protectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  protectedRouteRoute: protectedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
