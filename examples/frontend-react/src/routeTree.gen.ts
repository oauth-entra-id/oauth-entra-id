/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as protectedRouteImport } from './routes/(protected)/route'
import { Route as protectedIndexImport } from './routes/(protected)/index'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const protectedRouteRoute = protectedRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRoute,
} as any)

const protectedIndexRoute = protectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => protectedRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/(protected)/': {
      id: '/(protected)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedIndexImport
      parentRoute: typeof protectedRouteImport
    }
  }
}

// Create and export the route tree

interface protectedRouteRouteChildren {
  protectedIndexRoute: typeof protectedIndexRoute
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedIndexRoute: protectedIndexRoute,
}

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(
  protectedRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof protectedIndexRoute
  '/login': typeof LoginRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/': typeof protectedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(protected)': typeof protectedRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/(protected)/': typeof protectedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/'
  id: '__root__' | '/(protected)' | '/login' | '/(protected)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  protectedRouteRoute: typeof protectedRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  protectedRouteRoute: protectedRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(protected)",
        "/login"
      ]
    },
    "/(protected)": {
      "filePath": "(protected)/route.tsx",
      "children": [
        "/(protected)/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/(protected)/": {
      "filePath": "(protected)/index.tsx",
      "parent": "/(protected)"
    }
  }
}
ROUTE_MANIFEST_END */
